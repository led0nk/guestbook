# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build and Test
on:
  push:
    branches:
      - main 
  pull_request:

jobs:
  setup-environment:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: "1.21.8"
          cache: false
      - name: Cache Go
        id: go-cache
        timeout-minutes: 5
        uses: actions/cache@v4
        with:
          path: |
            ~/go/bin
            ~/go/pkg/mod
          key: go-cache-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.22

      - name: Check out code
        uses: actions/checkout@v1

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4.0.0
        with:
          version: latest 
          args: # optional, default is 
          # golangci-lint working directory, default is project root
          working-directory: # optional
          # the token is used for fetching patch of a pull request to show only new issues
          github-token: ${{ github.token }}
          # if set to true and the action runs on a pull request - the action outputs only newly found issues
          only-new-issues: false 
          skip-cache: false 
          skip-pkg-cache: false 
          skip-build-cache: false 
          install-mode: binary 

  go-versions:
      name: Lookup Go versions
      runs-on: ubuntu-latest
      outputs:
        matrix: ${{ steps.versions.outputs.matrix }}
      steps:
        - uses: actions/checkout@v3
        - uses: arnested/go-version-action@v1
          id: versions
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: go-versions
    strategy:
      matrix:
        version: ${{ fromJSON(needs.go-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.version }}
          check-latest: true
      - name: Go test
        if: startsWith(matrix.version, '1.18')
        run: go test -v -race -cover -covermode=atomic -coverprofile=coverage.txt ./...

  unittest-matrix:
    strategy:
      matrix:
        go-version: ["1.22.0", "1.21.8"] # 1.20 is interpreted as 1.2 without quotes
        group:
          - receiver-0
          - receiver-1
          - receiver-2
          - receiver-3
          - processor
          - exporter-0
          - exporter-1
          - extension
          - connector
          - internal
          - pkg
          - cmd-0
          - cmd-1
          - other
    runs-on: ubuntu-latest
    needs: go-versions
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: false
      - name: Cache Go
        id: go-cache
        timeout-minutes: 5
        uses: actions/cache@v4
        with:
          path: |
            ~/go/bin
            ~/go/pkg/mod
          key: go-cache-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
      - name: Install dependencies
        if: steps.go-cache.outputs.cache-hit != 'true'
        run: make -j2 gomoddownload
      - name: Install Tools
        if: steps.go-cache.outputs.cache-hit != 'true'
        run: make install-tools
      - name: Cache Test Build
        uses: actions/cache@v4
        with:
          path: ~/.cache/go-build
          key: go-test-build-${{ runner.os }}-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
      - name: Run Unit Tests
        if:  matrix.go-version != ${{ fromJSON(needs.go-versions.outputs.matrix) }}
        run: make test GROUP=${{ matrix.group }}
      - name: Run Unit Tests With Coverage
        if:  matrix.go-version == ${{ fromJSON(needs.go-versions.outputs.matrix) }}
        run: make test-with-cover GROUP=${{ matrix.group }}
      - uses: actions/upload-artifact@v4
        if: startsWith( matrix.go-version, '1.21' ) # only upload artifact for one version
        with:
          name: coverage-artifacts-${{ matrix.go-version }}-${{ matrix.group }}
          path: ${{ matrix.group }}-coverage.txt


  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.22

      - name: Check out code
        uses: actions/checkout@v1

      - name: Build
        run: make build
